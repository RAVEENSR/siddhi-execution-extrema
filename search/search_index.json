{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-extrema\n\n\nThe \nsiddhi-execution-extrema extension\n is an extension to \nSiddhi\n that processes event streams based on different arithmetic properties.\nDifferent types of processors are available to extract the extremas from the event streams according to the specified attribute in the stream.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n4.0.15\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.execution.extrema\n/groupId\n\n        \nartifactId\nsiddhi-execution-extrema\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nbottomK\n \n(Stream Processor)\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\nbottomKLengthBatch\n \n(Stream Processor)\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\nbottomKTimeBatch\n \n(Stream Processor)\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\nkalmanMinMax\n \n(Stream Processor)\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\nkernelMinMax\n \n(Stream Processor)\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\nminMax\n \n(Stream Processor)\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\ntopK\n \n(Stream Processor)\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\ntopKLengthBatch\n \n(Stream Processor)\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\ntopKTimeBatch\n \n(Stream Processor)\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\nmaxByLength\n \n(Window)\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\nmaxByLengthBatch\n \n(Window)\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\nmaxbytime\n \n(Window)\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\nmaxbytimebatch\n \n(Window)\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\nminByLength\n \n(Window)\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\nminByLengthBatch\n \n(Window)\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\nminbytime\n \n(Window)\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\nminbytimebatch\n \n(Window)\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-execution-extrema", 
            "text": "The  siddhi-execution-extrema extension  is an extension to  Siddhi  that processes event streams based on different arithmetic properties.\nDifferent types of processors are available to extract the extremas from the event streams according to the specified attribute in the stream.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-execution-extrema"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  4.0.15 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.execution.extrema /groupId \n         artifactId siddhi-execution-extrema /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "bottomK   (Stream Processor) bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  bottomKLengthBatch   (Stream Processor) bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  bottomKTimeBatch   (Stream Processor) bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  kalmanMinMax   (Stream Processor) kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  kernelMinMax   (Stream Processor) kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  minMax   (Stream Processor) minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  topK   (Stream Processor) topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  topKLengthBatch   (Stream Processor) topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  topKTimeBatch   (Stream Processor) topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  maxByLength   (Window) maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  maxByLengthBatch   (Window) maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  maxbytime   (Window) maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  maxbytimebatch   (Window) maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  minByLength   (Window) minByLength  derives the minimum value for the given attribute in the specified sliding window.  minByLengthBatch   (Window) minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  minbytime   (Window) minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  minbytimebatch   (Window) minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/4.0.15/", 
            "text": "API Docs - v4.0.15\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occurring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#api-docs-v4015", 
            "text": "", 
            "title": "API Docs - v4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.15/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occurring values that must be returned. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.15/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.15/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.15/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.15/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.15/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.15/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.15/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.15/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.14/", 
            "text": "API Docs - v4.0.14\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occurring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#api-docs-v4014", 
            "text": "", 
            "title": "API Docs - v4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.14/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occurring values that must be returned. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.14/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.14/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.14/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.14/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.14/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.14/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.14/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.14/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.13/", 
            "text": "API Docs - v4.0.13\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occurring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#api-docs-v4013", 
            "text": "", 
            "title": "API Docs - v4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.13/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occurring values that must be returned. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.13/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.13/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.13/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.13/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.13/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.13/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.13/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.13/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.12/", 
            "text": "API Docs - v4.0.12\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occurring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#api-docs-v4012", 
            "text": "", 
            "title": "API Docs - v4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.12/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occurring values that must be returned. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.12/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.12/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.12/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.12/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.12/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.12/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.12/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.12/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.11/", 
            "text": "API Docs - v4.0.11\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occurring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#api-docs-v4011", 
            "text": "", 
            "title": "API Docs - v4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.11/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occurring values that must be returned. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.11/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.11/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.11/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.11/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.11/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.11/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.11/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.11/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.10/", 
            "text": "API Docs - v4.0.10\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occuring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#api-docs-v4010", 
            "text": "", 
            "title": "API Docs - v4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.10/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occuring values that must be returned. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.10/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.10/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.10/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.10/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.10/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.10/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.10/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.10/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.9/", 
            "text": "API Docs - v4.0.9\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occuring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#api-docs-v409", 
            "text": "", 
            "title": "API Docs - v4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.9/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occuring values that must be returned. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.9/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.9/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.9/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.9/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.9/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.9/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.9/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.8/", 
            "text": "API Docs - v4.0.8\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occuring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#api-docs-v408", 
            "text": "", 
            "title": "API Docs - v4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.8/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occuring values that must be returned. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.8/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.8/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.8/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.8/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.8/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.8/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.8/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.8/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.7/", 
            "text": "API Docs - v4.0.7\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occuring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#api-docs-v407", 
            "text": "", 
            "title": "API Docs - v4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.7/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occuring values that must be returned. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.7/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.7/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.7/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.7/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.7/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.7/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.7/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.7/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.6/", 
            "text": "API Docs - v4.0.6\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occuring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#api-docs-v406", 
            "text": "", 
            "title": "API Docs - v4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.6/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occuring values that must be returned. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.6/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.6/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.6/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.6/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.6/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.6/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.6/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.5/", 
            "text": "API Docs - v4.0.5\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occuring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "4.0.5"
        }, 
        {
            "location": "/api/4.0.5/#api-docs-v405", 
            "text": "", 
            "title": "API Docs - v4.0.5"
        }, 
        {
            "location": "/api/4.0.5/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.5/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occuring values that must be returned. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.5/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.5/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.5/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.5/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.5/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.5/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.5/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.5/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.4/", 
            "text": "API Docs - v4.0.4\n\n\nExtrema\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occuring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "4.0.4"
        }, 
        {
            "location": "/api/4.0.4/#api-docs-v404", 
            "text": "", 
            "title": "API Docs - v4.0.4"
        }, 
        {
            "location": "/api/4.0.4/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.4/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.4/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.4/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.4/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.4/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.4/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.4/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.4/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.4/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.4/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.4/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.4/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.4/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.4/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.4/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occuring values that must be returned. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.4/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.4/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v4.0.15\n\n\nExtrema\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK\n counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query outputs the three items with the lowest frequency counts.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatc\n counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.\n\n\n\nSyntax\n\n\nextrema:bottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch\n counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the \nbottomK\n results for each chunk of received events.\n\n\n\nSyntax\n\n\nextrema:bottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of least frequently occurring values that must be returned.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbottomNElement\n\n        \nThe value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \nbottomNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nkalmanMinMax\n uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be \nmin\n, \nmax\n or \nminmax\n.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, \nmin\n)insert all events into outputStream;)\n\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernelMinMax\n uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as \nmin\n or \nmax\n as relevant.\n\n\n\nSyntax\n\n\nextrema:kernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;\n\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax\n finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the minimum value.\nAn event where the value for the specified attribute is greater by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPostBound\n length window after the event with the minimum value.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the \npreBoundChange\n must have arrived within the \nmaxPreBound\n length window before the event with the maximum value.\nAn event where the value for the specified attribute is less by the percentage specified as the \npostBoundChange\n must have arrived within the \nmaxPreBound\n length window after the event with the maximum value.\nThe extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound\n: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPreBound\n window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the \nMaxPostBound\n window.\n\n\n\nSyntax\n\n\nextrema:minMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window before the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold value for  the percentage difference between the value that occurred in the \nmaxPreBound\n length window after the maximum value, and the maximum value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin\n: If this is specified, minimum values are identified within the given window length, and they are returned with \nmin\n as their extrema type.\nmax\n: If this is specified, maximum values are identified within the given window length, and they are returned with \nmax\n as their extrema type.\nminmax\n: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as \nmin\n for the minimum events, and as \nmax\n for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the maximum values found within a set of price values.\n\n\n\nEXAMPLE 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nmin\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns the minimum values found within a set of price values.\n\n\n\nEXAMPLE 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, \nminmax\n)\nselect *\ninsert into outputStream; \n\n\n\n\n\nThis query returns both the minimum values and the maximum values found within a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK\n counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query emits the three items with the highest frequency counts.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch\n counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\n\nThis query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch\n counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.\n\n\n\nSyntax\n\n\nextrema:topKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ntopNElement\n\n        \nThe value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n    \n\n    \n\n        \ntopNFrequency\n\n        \nThe frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1 \n= N \n= k.value, where k.value is defined as the function parameter.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\n\nThis query counts the frequency of the values for the \nitem\n attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.\n\n\n\nmaxByLength \n(Window)\n\n\nmaxByLength\n returns the event with the maximum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:maxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query observes a sliding window of 4 events, and returns the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nmaxByLengthBatch\n calculates and returns the maximum value of a specified attribute inside a batch window.\n\n\n\nSyntax\n\n\nextrema:maxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch observed.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.\n\n\n\nmaxbytime \n(Window)\n\n\nmaxbytime\n calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:maxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).\n\n\n\nmaxbytimebatch \n(Window)\n\n\nmaxbytimebatch\n calculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:maxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.\n\n\n\nminByLength \n(Window)\n\n\nminByLength\n derives the minimum value for the given attribute in the specified sliding window.\n\n\n\nSyntax\n\n\nextrema:minByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query outputs the minimum price for a sliding length window of four events.\n\n\n\nminByLengthBatch \n(Window)\n\n\nminByLengthBatch\n calculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nextrema:minByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\n This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.\n\n\n\nminbytime \n(Window)\n\n\nminbytime\n calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the \ntime.window.length\n specified.\n\n\n\nSyntax\n\n\nextrema:minbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\n\nThis query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).\n\n\n\nminbytimebatch \n(Window)\n\n\nminbytimebatch\n calculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nextrema:minbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v4015", 
            "text": "", 
            "title": "API Docs - v4.0.15"
        }, 
        {
            "location": "/api/latest/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/latest/#bottomk-stream-processor", 
            "text": "bottomK  counts the frequency of different values for a specified attribute, and outputs the specified number of least frequently occuring values. Events are output only if there is a change in the bottomK results for each chunk of received events.  Syntax  extrema:bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  This query outputs the three items with the lowest frequency counts.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatc  counts the frequency of different values of a specified attribute inside a batch window, and returns the specified number of least frequently occuring values. The bottom K frequency values are returned per batch.  Syntax  extrema:bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window observed. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the batch window is full, the three items with the lowest frequency are output, and the window is reset.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch  counts the frequency of different values for a specified attribute inside a time window, and outputs a specified number of least frequently occuring values. Events are output only if there is a change in the  bottomK  results for each chunk of received events.  Syntax  extrema:bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of least frequently occurring values that must be returned. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         bottomNElement \n         The value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         bottomNFrequency \n         The frequency of the value of the attribute that has the nth lowest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  This query collects a batch of events during a time window of one second. Once the window is full, the three items with the lowest frequency are output and the window is reset.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#kalmanminmax-stream-processor", 
            "text": "kalmanMinMax  uses the Kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be  min ,  max  or  minmax . min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25,  min )insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#kernelminmax-stream-processor", 
            "text": "kernelMinMax  uses Gaussian Kernel to smooth the time series values in the given window size, and then determines the maxima and minima of that set of values. It returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as  min  or  max  as relevant.  Syntax  extrema:kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, ?max?)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#minmax-stream-processor", 
            "text": "minMax  finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the minimum value. An event where the value for the specified attribute is greater by the percentage specified as the  postBoundChange  must have arrived within the  maxPostBound  length window after the event with the minimum value. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the  preBoundChange  must have arrived within the  maxPreBound  length window before the event with the maximum value. An event where the value for the specified attribute is less by the percentage specified as the  postBoundChange  must have arrived within the  maxPreBound  length window after the event with the maximum value. The extension returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound : The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPreBound  window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value must be within the  MaxPostBound  window.  Syntax  extrema:minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window before the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold value for  the percentage difference between the value that occurred in the  maxPreBound  length window after the maximum value, and the maximum value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min : If this is specified, minimum values are identified within the given window length, and they are returned with  min  as their extrema type. max : If this is specified, maximum values are identified within the given window length, and they are returned with  max  as their extrema type. minmax : If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as  min  for the minimum events, and as  max  for the maximum events. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  max )\nselect *\ninsert into outputStream;   This query returns the maximum values found within a set of price values.  EXAMPLE 2  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  min )\nselect *\ninsert into outputStream;   This query returns the minimum values found within a set of price values.  EXAMPLE 3  from inputStream#extrema:minMax(price, 4, 4, 1, 2,  minmax )\nselect *\ninsert into outputStream;   This query returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#topk-stream-processor", 
            "text": "topK  counts the frequency of different values of a specified attribute, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  This query emits the three items with the highest frequency counts.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch  counts the frequency of different values of a specified attribute, within a batch window of a specified length, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if2 is specified, this extension returns the two attribute values (for the specifiedattribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  This query collects a batch of six events. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch  counts the frequency of different values of a specified attribute within a time window, and emits the (k) number of values with the highest frequency.  Syntax  extrema:topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of frequent values that should be emitted as the output (e.g., if 2 is specified, this extension returns the two attribute values (for the specified attribute) that have the highest frequency. \n         \n         INT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         topNElement \n         The value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n     \n     \n         topNFrequency \n         The frequency of the value of the attribute that has the nth highest frequency. Here, N is an integer that can have the values of 1  = N  = k.value, where k.value is defined as the function parameter. \n         LONG \n       Examples  EXAMPLE 1  define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  This query counts the frequency of the values for the  item  attribute within a time window of one second, and emits the 3 items. A batch of one second is collected. Once the window is full, the three items with the highest frequency are emitted and the window is reset.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#maxbylength-window", 
            "text": "maxByLength  returns the event with the maximum value for the given attribute in the specified sliding window.  Syntax  extrema:maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query observes a sliding window of 4 events, and returns the event with the maximum price.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/latest/#maxbylengthbatch-window", 
            "text": "maxByLengthBatch  calculates and returns the maximum value of a specified attribute inside a batch window.  Syntax  extrema:maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch observed. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  This query collects a batch of 4 events. Once the window is full, the item with the maximum price in the batch is returned as the output, and the window is reset.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/latest/#maxbytime-window", 
            "text": "maxbytime  calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a sliding time window of 1 second. This output is updated for every event arrival and expiry (after 1 second of its arrival).", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/latest/#maxbytimebatch-window", 
            "text": "maxbytimebatch  calculates the maximum value of a specified attribute within a time window, and emits it.  Syntax  extrema:maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset, and the event with the maximum price is output.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/latest/#minbylength-window", 
            "text": "minByLength  derives the minimum value for the given attribute in the specified sliding window.  Syntax  extrema:minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  This query outputs the minimum price for a sliding length window of four events.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/latest/#minbylengthbatch-window", 
            "text": "minByLengthBatch  calculates the minimum value of a specified attribute inside a batch window and emits it.  Syntax  extrema:minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;   This query collects a batch of four events. Once the batch window is full, it outputs the item with the minimum price in the batch. Then the window is reset.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/latest/#minbytime-window", 
            "text": "minbytime  calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the  time.window.length  specified.  Syntax  extrema:minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  This query outputs the event with the minimum price for a sliding time window of one second. This output is updated for every event arrival and expiry of every event (after one second of its arrival).", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/latest/#minbytimebatch-window", 
            "text": "minbytimebatch  calculates the minimum value of a specified attribute within a time window, and emits it.  Syntax  extrema:minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  This query considers a time-batch window of 1 second. After every second, the window is reset and it emits the event with the minimum price.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}